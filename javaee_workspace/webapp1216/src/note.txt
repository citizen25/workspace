ms 설치의 부담이 개발자에게 없고, 모든 것을 ms 패키지에서 알아서 해줌 install 등

자바 분야는 왜 설치할 것이 많은가? 개발자가 스스로?
	오픈소스 진영이기 때문에
	소프트웨어를 개발한 업체가 한군데가 아니다
	자바 언어는 서버, 라이브러리 등등 개발 벤더가 너무 많다
		덕지덕지

1. 커넥션 풀링 (jndi 이용하자) -> hosting.cafe24 의 고객센터 jsp호스팅 질문에 있다
	1) server.xml에서 resource 태그 등록
	2) context.xml에서 등록
	3) web.xml에서 등록


jsp는 서블릿이다


MVC란?
	구현된 개발 code를 의미하는게 아니라,
	application 개발 시, design과 logic을 분리시켜 개발해야
	추후 변경 사항이 발생했을 때, 많은 resource(개발시간, 인력)를 소모하지 않고
	유지보수할 수 있다는 IT에서 전해내려오는 개발방법 이론(개발 패턴)

M(Model) : 데이터 자체이거나, 로직을 다루는 객체
C(Controller) : Model과 View를 분리시키는 분리자
V(View) : 디자인


--------------------------------------------------------------------------------------------------------------------------
MVC : ms개발자 .net도 사용

javaEE 기반 개발자 각각을 어떤 기술로 만드는게 좋을까?
	Model : 중립적 로직이라서, 스윙, 웹 모두 사용할 수 있는 중립적 코드
		-> 일반 Class
	View : javaEE의 디자인을 담당하는 파일
		-> JSP
	Contoller : 웹에서 실행될 수 있는 파일(jsp와 servlet이 있는데 jsp는 view이다)
		-> Servlet

--------------------------------------------------------------------------------------------------------------------------
javaEE 분야게서는 MVC개발이론을 반영한 개발방법을 모델2 방식이라 한다
즉, java로 구현한 MVC패턴을 모델2 방식이라 한다

web application을 java 기술로, 특히 MVC 패턴으로 개발한다고 가정했을 때
알맞은 기술을 짝지어보자

M - 중립적 로직 = java의 일반 Class
V - 디자인 = jsp
C - 디자인은 아니면서 web에서 돌아가는 것 = Servlet

Controller - 로직인 Model과 디자인인 View를 분리시키기 위한 용도
	5가지 역할(웹이건 응용프로그램이건)
		1. 요청을 받는다
		2. 요청을 분석한다
		3. 알맞는 로직 객체에게 일을 시킨다(지가 직접 안한다)
		4. 시킨 일에 대해 결과가 있다면, 결과를 보관한다
		5. 디자인에 그 결과를 반영한다
			







