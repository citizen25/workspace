package car;

public class Taxi extends Car{
	/* 이미 Car를 상속받았으므로, 마찬가지로 택시만이 갖는 특징만 추가하면 된다.
	코드량이 현저히 줄고, 중복작성 하지 않아도 되므로 유지보수하기에 좋다.
	oop 언어의 목적은 바로 상속이다! */

	/*
	부모가 먼저 존재해야하기 때문에 sun사에서는 눈에 보이지 않게, 자식의 디폴트 생성자에
	보이지 않는 생성자 호출을 살짝 넣어두었다.

	public Taxi(){
		super();	// 이 생성자 호출이 숨어있다.
		// super는 부모클래스를 의미하고 super()는 부모의 생성자를 의미한다.
	}

	*/

	public Taxi(){
		super("benz");		// 부모의 생성자에 매개변수가 있기 때문에, "매개변수가 있는" 생성자를 호출한다.
		// 이렇게 하면, 존재하는 생성자를 제대로 호출하는 것이므로, 더 이상 에러가 나지 않는다.
	}

	// 위와 같이 개발자가 직접 알맞은 생성자를 정의하는 방법을 추천하지만, 이런 경우도 있다.
	// 부모 클래스에 생성자를 여러개 정의하는 것. == 매개변수 있는 것, 없는 것, 온갖 종류를 다 정의해놓는 것.(==오버로딩)

	// 택시만이 갖는 특징
	public void pass(){
		System.out.println("승객을 태워요");
	}
}