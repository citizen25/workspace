동적 메모리 할당이 왜 필요할까?
    3명의 사용자의 점수를 입력받아 저장
    int score[3];
    scanf("%d", &score[0]);
    scanf("%d", &score[1]);
    scanf("%d", &score[2]);
        -> 정적 메모리 : 프로그램이 실행되지 전 이미 결정된 크기를 갖는다.
    
    몇명 입력할래? (입력 숫자)
        입력한 숫자만큼 배열의 크기를 생성
            -> 프로그램이 실행되고 있는 순간에 배열의 크기 지정

동적메모리를 사용해서 프로그램이 실행되는 도중에 배열의 크기 지정!

동적 메모리 할당 방법
    1) #include <stdlib.h>
    2) malloc() 함수 사용
        malloc(할당 받을 메모리 크기);
            : malloc는 () 괄호 안에 적은 숫자 byte 크기만큼 메모리를 할당하여, 할당 받은 메모리의 "시작 주소를 반환"하는 함수.
    3) 저장할 포인터 생성
        mallock() 함수가 할당 받은 메모리의 시작 주소를 반환하므로 시작 주소를 저장할 포인터를 생성하여 "포인터에 주소 저장"


 메모리
    스택 영역 : 함수가 호출되고 종료될 때 까지
        매개변수
        지역변수
    힙 영역 : 생명주기가 결정되어 있지 않기 때문에 free()로 내가 생명주기를 정해줘야 한다.
        동적메모리 할당 받을 영역
    데이터 영역 : 프로그램이 시작되고 종료될 때 까지
        전역변수
        정적변수



#include <stdlib.h>

void main(){
    int *pa;
    pa = (int *)malloc(sizeof(int)*3);
        // (int *)로 형변환하는 이유 : malloc의 반환형은 void*이기 때문에 자료형을 맞춰주기 위함이다.
    free(pa);
        // 동적으로 할당받은 메모리를 해제시켜준다.
}





[동적 메모리 할당으로 2차원 배열 사용]
    1) #include <stdlib.h>
    2) malloc() 함수 사용
    3) 할당 받을 메모리를 저장할 "이중 포인터" 생성i
    4) 1차원 배열을 생성할 "단일 포인터" 생성
    5) 단일 포인터와 이중 포인터 모두 free